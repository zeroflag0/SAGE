#region LGPL License
//********************************************************************
//	author:         Thomas "zeroflag" Kraemer
//	author email:   zeroflag@zeroflag.de
//	
//	Copyright (C) 2006-2008  Thomas "zeroflag" Kraemer
//	
//	license:	(LGPL)
//	
//		This library is free software; you can redistribute it and/or
//		modify it under the terms of the GNU Lesser General Public
//		License as published by the Free Software Foundation; either
//		version 2.1 of the License, or (at your option) any later version.
//
//		This library is distributed in the hope that it will be useful,
//		but WITHOUT ANY WARRANTY; without even the implied warranty of
//		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//		Lesser General Public License for more details.
//
//		You should have received a copy of the GNU Lesser General Public
//		License along with this library; if not, write to the Free Software
//		Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
//
//		http://www.gnu.org/licenses/lgpl.html#TOC1
//
//*********************************************************************
#endregion LGPL License

// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Sage.Threading;
namespace TestProject
{
	/// <summary>
	///This is a test class for Sage.Threading.PriorityQueue&lt;T&gt; and is intended
	///to contain all Sage.Threading.PriorityQueue&lt;T&gt; Unit Tests
	///</summary>
	[TestClass()]
	public class PriorityQueueTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}

		PriorityQueue<Task> m_Instance;

		public PriorityQueue<Task> Instance
		{
			get { return m_Instance; }
			set { m_Instance = value; }
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		[TestInitialize()]
		public void MyTestInitialize()
		{
			this.Instance = new PriorityQueue<Task>();
		}
		//
		//Use TestCleanup to run code after each test has run
		//
		[TestCleanup()]
		public void MyTestCleanup()
		{
		}
		//
		#endregion


		/// <summary>
		///A test for Compare (T, T)
		///</summary>
		[TestMethod()]
		public void CompareTest()
		{
			PriorityQueue<Task> target = this.Instance;
			// 
			// T x = 0; // TODO: Initialize to an appropriate value
			// 
			// T y = 0; // TODO: Initialize to an appropriate value
			Task x = new Task(null, 1, 0);
			Task y = new Task(null, 2, 0);
			// 
			int expected = x.CompareTo(y);
			int actual;
			// 
			actual = target.Compare(x, y);
			// 
			Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Compare did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			//Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Comparer
		///</summary>
		//[TestMethod()]
		//public void ComparerTest()
		//{
		//    PriorityQueue<Task> target = this.Instance;

		//    PriorityQueue<Task>.CompareHandler val = this.Instance.Comparer; // TODO: Assign to an appropriate value for the property

		//    target.Comparer = val;


		//    Assert.AreEqual(val, target.Comparer, "Sage.Threading.PriorityQueue<Task>.Comparer was not set correctly.");
		//    // Assert.Inconclusive("Verify the correctness of this test method.");
		//    //Assert.Inconclusive("Generics testing must be manually provided.");
		//}

		/// <summary>
		///A test for Count
		///</summary>
		//[TestMethod()]
		//public void CountTest()
		//{
		//    PriorityQueue<Task> target = this.Instance;

		//    int val = 0; // TODO: Assign to an appropriate value for the property


		//    Assert.AreEqual(val, target.Count, "Sage.Threading.PriorityQueue<Task>.Count was not set correctly.");
		//    // Assert.Inconclusive("Verify the correctness of this test method.");
		//    //Assert.Inconclusive("Generics testing must be manually provided.");
		//}

		/// <summary>
		///A test for Items
		///</summary>
		//[TestMethod()]
		//public void ItemsTest()
		//{
		//    // PriorityQueue<Task> target = new PriorityQueue<Task>();
		//    // 
		//    // System.Collections.Generic.List<T> val = null; // TODO: Assign to an appropriate value for the property
		//    // 
		//    // 
		//    // Assert.AreEqual(val, target.Items, "Sage.Threading.PriorityQueue<Task>.Items was not set correctly.");
		//    // Assert.Inconclusive("Verify the correctness of this test method.");
		//    Assert.Inconclusive("Generics testing must be manually provided.");
		//}

		/// <summary>
		///A test for Peek ()
		///</summary>
		//[TestMethod()]
		//public void PeekTest()
		//{
		//    // PriorityQueue<Task> target = new PriorityQueue<Task>();
		//    // 
		//    // T expected = 0;
		//    // T actual;
		//    // 
		//    // actual = target.Peek();
		//    // 
		//    // Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Peek did not return the expected value.");
		//    // Assert.Inconclusive("Verify the correctness of this test method.");
		//    Assert.Inconclusive("Generics testing must be manually provided.");
		//}

		/// <summary>
		///A test for Pop ()
		///</summary>
		//[TestMethod()]
		//public void PopTest()
		//{
		//    // PriorityQueue<Task> target = new PriorityQueue<Task>();
		//    // 
		//    // T expected = 0;
		//    // T actual;
		//    // 
		//    // actual = target.Pop();
		//    // 
		//    // Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Pop did not return the expected value.");
		//    // Assert.Inconclusive("Verify the correctness of this test method.");
		//    Assert.Inconclusive("Generics testing must be manually provided.");
		//}

		/// <summary>
		///A test for Push (T)
		///</summary>
		[TestMethod()]
		public void PushTest()
		{
			PriorityQueue<Task> target = new PriorityQueue<Task>();

			Task expected = new Task(new Message(Task1), (long)1);

			target.Push(new Task(new Message(Task2), (long)5));
			target.Push(new Task(new Message(Task3), (long)9));
			target.Push(expected);

			Task actual = target.Pop();
			Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Push did not insert values in expected order.");
			target.Pop();
			target.Pop();

			target.Push(new Task(new Message(Task2), (long)5));
			target.Push(new Task(new Message(Task2), (long)5));
			target.Push(expected);
			actual = target.Pop();
			Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Push did not insert values in expected order.");
			target.Pop();
			target.Pop();

			target.Push(expected);
			target.Push(expected);
			target.Push(new Task(new Message(Task2), (long)5));
			actual = target.Pop();
			Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Push did not insert values in expected order.");

			//target.Push(new Task(new Message0(Task2), (long)5));
			//actual = target.Pop();
			//Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Push did not insert values in expected order.");

			//Assert.AreEqual(expected, actual, "Sage.Threading.PriorityQueue<Task>.Push did not insert values in expected order.");

			//Assert.Inconclusive("A method that does not return a value cannot be verified.");
			//Assert.Inconclusive("Generics testing must be manually provided.");
		}
		void Task1() { }
		void Task2() { }
		void Task3() { }
	}


}
